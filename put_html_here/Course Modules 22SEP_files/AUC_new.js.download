
// BEGIN ATOMIC SEARCH//
var atomicSearchWidgetScript = document.createElement("script");
atomicSearchWidgetScript.src = "https://js.atomicsearchwidget.com/atomic_search_widget.js";
document.getElementsByTagName("head")[0].appendChild(atomicSearchWidgetScript);
//END ATOMIC SEARCH//

var CanvasDetails = {};
var faccheck;
(function () {

    CanvasDetails.location = getLocationDetails();
    $.get("/api/v1/users/self", function (data) {
        CanvasDetails.userInfo = data;
        if (CanvasDetails.courseInfo)
            infoCont();
    });
    if (CanvasDetails.location && CanvasDetails.location.search && CanvasDetails.location.search.noframe == "true") {
        onElementRendered("body", function () {
            var tag = "<style type='text/css'> #not_right_side {\
            background: #eee none repeat scroll 0 0;\
            bottom: 0;\
            left: 0;\
            overflow: auto;\
            position: fixed;\
            right: 0;\
            top: 0;\
            z-index: 10000;\
        }\
        header.ic-app-header {\
            display: none;\
        }</style>"
            $(tag).appendTo("head");
        });
    }
    // var hideFac = "<style>#global_nav_faculty_link {    display: none;}</style>"
    //   $(hideFac).appendTo("head");

    if (CanvasDetails.location.courses) {
        $.get("/api/v1/courses/" + CanvasDetails.location.courses, function (data) {
            CanvasDetails.courseInfo = data;
            if (CanvasDetails.userInfo)
                infoCont();
            // $("body").append("<div class='insructor-tools'></div>");
        });
    } else {
        faccheck = false;
    }

    function infoCont() {
        console.log("info check")
        if (CanvasDetails.courseInfo.enrollments) {
            $.each(CanvasDetails.courseInfo.enrollments, function (i, v) {
                console.log(v.user_id, CanvasDetails.userInfo.id)
                if (v.user_id === CanvasDetails.userInfo.id) {
                    faccheck = true;
                }
            })
        }
    }
    onVarAvailable(["CanvasDetails", 'courseInfo'], function () {
        if (CanvasDetails.courseInfo.course_format === "online") {
            $("body").addClass("online");
        } else {
            $("body").addClass("campus")
        }
    });



    onElementRendered($("h2:contains(Add Account Admins)"), function () {
        $('<div><form><label>Search for User To Add</label><div class="ic-Input-group"><input type="text" class="ic-Input" id="dvu-search-query"><input type="submit" class="Button Button---primary" id="dvu-search-for-users" value="search"></div></form><ul class="admins_list user_list list admins" id="dos-user-results" style="max-height:200px;overflow:auto;"></ul></div>').insertAfter("#admin_role_id");
        $("#dvu-search-for-users").click(function (e) {
            e.preventDefault();
            $("#dos-user-results").empty();
            $.get("/api/v1/accounts/1/users?search_term=" + $("#dvu-search-query").val()).then(function (data) {
                $.each(data, function (i, v) {
                    $('<li id="dos-user-toadd">\
  <span class="user_name name">' + v.name + '</span>\
    <a title="Add to list" class="dos-add-user-to-list no-hover" data-user-login="' + v.login_id + '" style="float:right;" href="/accounts/6/account_users/19"><i class="icon-add standalone-icon"></i></a>\
  <span class="email">' + v.login_id + '</span>\
</li>').appendTo($("#dos-user-results"));
                });
            });
        })
        $("#dos-user-results").on("click", ".dos-add-user-to-list", function (e) {
            e.preventDefault();
            if ($("#user_list").val().indexOf($(this).attr("data-user-login")) < 0)
                $("#user_list").val($("#user_list").val() + " " + $(this).attr("data-user-login"));
        });
    });


    var toLoad = {
        scripts: [
            /*{src: "https://hub2.devry.edu/files/template/DeVryCourseTemplate/DVU_CCC/JavaScript/jQuery/studytools/script/modernizr.custom.32922.js", onLoad: function () {
                }},*/
			{src: "https://lms.courselearn.net/lms/scripts/modernizr.custom.32922.js", onLoad: function () {
                }},	
            {src: "https://lms.courselearn.net/lms/scripts/auc/auc_script.js?v=12314", onLoad: function () {
                    loader({src: "https://lms.courselearn.net/lms/scripts/sidebar_usergrab.js", onLoad: function () {

                        }});
                }},
            {src: "https://lms.courselearn.net/lms/scripts/lib/jqueryui/jquery-ui.min.js", onLoad: function () {
                }},
            {src: "https://lms.courselearn.net/lms/scripts/jquery.acornmediaplayer.js", onLoad: function () {
                }},
            {src: "https://lms.courselearn.net/lms/scripts/audio_player.js", onLoad: function () {
                }},
            {src: "https://lms.courselearn.net/lms/scripts/videoplaylist.js", onLoad: function () {
                }},
            {src: "https://cdnapisec.kaltura.com/p/1432812/sp/143281200/embedIframeJs/uiconf_id/27266491/partner_id/1432812", onLoad: function () {
                }},
            {src: "https://cdnapisec.kaltura.com/p/1432812/sp/143281200/embedIframeJs/uiconf_id/27266422/partner_id/1432812", onLoad: function () {
                }},
            {src: "https://lms.courselearn.net/lms/scripts/kalturavideo.js", onLoad: function () {
                }},
            {src: "https://lms.courselearn.net/lms/scripts/study-tools.js", onLoad: function () {
                }},
            {src: "https://lms.courselearn.net/lms/scripts/codeblockprotect.js", onLoad: function () {
                }},
            {src: "https://lms.courselearn.net/lms/scripts/auc/pagespecific.js", onLoad: function () {
                }},
            {src: "https://lms.courselearn.net/lms/scripts/HShow.js", onLoad: function () {
                }},
            {src: "https://lms.courselearn.net/lms/scripts/hideshow2.js", onLoad: function () {
                }},
            {src: "https://lms.courselearn.net/lms/scripts/Uber_Rollover.js", onLoad: function () {
                }},
            {src: "https://www.canvabadges.org/canvas_profile_badges.js", onLoad: function () {
                }},
            {src: "https://lms.courselearn.net/lms/scripts/imagedesc.js", onLoad: function () {
                }},
            {src: "https://lms.courselearn.net/lms/scripts/expertsays.js", onLoad: function () {
                }},
            {src: "https://f1-na.readspeaker.com/script/6598/ReadSpeaker.Canvas.js", onLoad: function () {
                }},
            {src: "https://use.fontawesome.com/90a4b89be9.js", onLoad: function () {
                }},
            {src: "https://lms.courselearn.net/lms/scripts/link_token_replacement.js", onLoad: function () {
                }},
            {src: "https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.js", onLoad: function () {
                    onElementRendered('.slick-carousel-item', function (item) {
                        item.each(function () {
                            var settings = {dots: true};
                            var insettings = $(this).attr("data-slick-settings");
                            if (insettings !== undefined) {
                                insettings = insettings.split(/;/);
                                $.each(insettings,
                                        function (i, item) {
                                            if (item.length > 1) {
                                                item = item.split(/:/);
                                                try {
                                                    settings[item[0]] = eval(item[1]);
                                                } catch (e) {
                                                    console.warn("could not load setting " + item[0], e);
                                                }
                                            }
                                        });
                            }
                            $(this).slick(settings);
                        });
                    });
                }
            }
        ],
        css: [
            "https://lms.courselearn.net/lms/styles/circle.css",
            "https://lms.courselearn.net/lms/styles/auc/auc_style.css",
            "https://lms.courselearn.net/lms/styles/acornmediaplayer.base.css",
            "https://lms.courselearn.net/lms/scripts/lib/jqueryui/jquery-ui.min.css",
            "https://lms.courselearn.net/lms/styles/acorn.access.css",
            "https://lms.courselearn.net/lms/styles/videoplaylist.css",
            "https://lms.courselearn.net/lms/styles/kalturaplayerstyles.css",
            "https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css",
            "https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.css",
            "https://lms.courselearn.net/lms/styles/slickfix.css",
            "https://lms.courselearn.net/lms/styles/Uber_RollOver.css",
            "https://lms.courselearn.net/lms/styles/mediadevelopment.css",
            "https://lms.courselearn.net/lms/styles/study-tools-main.css",
            "https://lms.courselearn.net/lms/styles/animate-custom.css",
        ]

    }

    if (CanvasDetails && CanvasDetails.location && CanvasDetails.location.hasOwnProperty('edit')) {

    } else {

        toLoad.scripts.push({src: "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&delayStartupUntil=configured", onLoad: function () {
                loader({src: "https://lms.courselearn.net/lms/scripts/consistent-eq-cnvs.js", onLoad: function () {
                        MathJax.Hub.Configured();
                    }});
            }});
    }

    if (CanvasDetails.location.pages) {
        onElementRendered("#wiki_page_show .page-title", function (element) {
            if ($("#wiki_page_show .section").length <= 0) {
                $("#wiki_page_show").addClass("enable-editing");
            }
        });
    }
    if (ENV && ENV.current_user_roles && ENV.current_user_roles.indexOf("admin") >= 0) {
        onElementRendered("#wiki_page_show", function (element) {
            $("#wiki_page_show").addClass("enable-editing");
        });
        onElementRendered("body", function (element) {
            $("body").addClass("is-admin");
        });
    } else {
      /*  onElementRendered("#tab-details", function (element) {
            $("#tab-details").find("input").attr("disabled", "true");
            $("#tab-details").find("select").not("#course_course_code").not("#course_home_page_announcement_limit").attr("disabled", "true");
            $("#course_home_page_announcement_limit, #course_hide_distribution_graphs, #course_lock_all_announcements").removeAttr("disabled");
            $("#tab-details").find(".ui-datepicker-trigger").attr("disabled", "true");
        });*/
    }



    onElementRendered(".prettyprint", function (element) {
        if (typeof PR !== "undefined" && PR.prettyprint) {
            PR.prettyPrint();
        } else {
            appendCSS("https://lms.courselearn.net/lms/scripts/lib/pretty/prettify.css");
            loader({src: "https://lms.courselearn.net/lms/scripts/lib/pretty/prettify.js", onLoad: function () {
                    loader({src: "https://lms.courselearn.net/lms/scripts/lib/pretty/lang-vb.js", onLoad: function () {
                            console.log("loaded");
                            PR.prettyPrint();
                        }});
                }});
        }


    });
//<span data-mig-tag='script' data-mig-src='urlofjs'></span>
//<span data-mig-tag='style' data-mig-src='urlofcss'></span>


    loadCss(toLoad.css);
    var len = toLoad.scripts.length;
    loadScripts(toLoad.scripts, function () {
        console.log("loaded ", len)
        onElementRendered("[data-mig-tag]", function (el) {
            $(el).each(function (i, element) {
                if ($(element).attr("data-mig-tag") === "script") {
                    if ($(element).attr("data-mig-src") !== undefined)
                        loader({src: $(element).attr("data-mig-src")});
                    else
                        loader({text: $(element).html()});
                } else if ($(element).attr("data-mig-tag") === "style") {
                    appendCSS($(element).attr("data-mig-src"));
                }
            })
        });
        onElementRendered("[data-script-url]", function (el) {
            $(el).each(function (i, element) {
                if ($(element).attr("data-script-url") !== undefined)
                    loader({src: $(element).attr("data-mig-src")});
            })
        });
    });


    function loader(scr, handler) {
        var script = document.createElement("script");
        if (scr.src) {
            script.src = scr.src;
            script.onload = script.onreadystatechange = function () {
                script.onreadystatechange = script.onload = null;
                if (scr.onLoad)
                    scr.onLoad();
                if (typeof handler === "function")
                    handler();
            }
            var head = document.getElementsByTagName("head")[0];
            (head || document.body).appendChild(script);
        } else if (scr.text) {
            addScriptBlock(scr.text, scr.onLoad);
        }
    }
    ;
    function loadScripts(array, callback) {

        (function run() {
            if (array.length != 0) {
                loader(array.shift(), run);
            } else {
                callback && callback();
            }
        })();
    }
    function addScriptBlock(text, callback) {
        var script = document.createElement("script");
        script.innerHTML = text
        var head = document.getElementsByTagName("head")[0];
        (head || document.body).appendChild(script);
        if (typeof callback === "function")
            callback();
    }

    function loadCss(array) {
        $.each(array, function (i, v) {
            appendCSS(v)
        });
    }

    function appendCSS(v) {
        var link = document.createElement('link');
        link.setAttribute('rel', 'stylesheet');
        link.setAttribute('type', 'text/css');
        link.setAttribute('href', v);
        document.getElementsByTagName('head')[0].appendChild(link);
    }

    function getLocationDetails() {
        try {
            var details = {url: location.href, search: {}};
            var path = location.pathname;
            path = path.split("/");
            for (var i = 1; i < path.length; i += 2) {
                details[path[i]] = path[i + 1];
            }
            if (location.search.length > 0) {
                var search = location.search.replace(/^\?/, "")
                search = search.split(/\&/);
                for (var i = 0; i < search.length; i++) {
                    var d = search[i].split("=");
                    details.search[d[0]] = d[1];
                }

            }
        } catch (e) {
            console.log(e)
        }
        return details;
    }
})();


function onElementRendered(selector, cb, _attempts) {
    var el = $(selector);
    _attempts = ++_attempts || 1;
    if (el.length)
        return cb(el);
    if (_attempts == 60)
        return;
    setTimeout(function () {
        onElementRendered(selector, cb, _attempts);
    }, 250);
}


function onVarAvailable(variable, cb, _attempts) {

    _attempts = ++_attempts || 1;
    if (typeof eval("window." + variable.join(".")) !== "undefined")
        return cb(eval("window." + variable.join(".")));
    if (_attempts == 60)
        return;
    setTimeout(function () {
        onVarAvailable(variable, cb, _attempts);
    }, 250);
}

// DON'T EDIT BELOW HERE

//Add the Course Resources button within /groups/groupID/conferences and /groups/groupID/collaborations
$(document).ready(function() {
    var groupLocArray = window.location.pathname.split('/');
    var groupCheck = groupLocArray[1];
    var confCheck = groupLocArray[3];
    if ((groupCheck == 'groups' ) && (confCheck == 'conferences'))  {
        $('button.btn.btn-primary.new-conference-btn').before("<a style='color:white;' href='/courses/899/pages/student-collaboration-tools'><button class='Button btn btn-primary'><strong>HELP&nbsp&nbsp</strong><i style='font-size:0.75rem'> (Course Resource Page)</i></button></a>");
    }  else {
        console.log("Not in Group HomePage or Conferences Area!")
    }
});

$(document).ready(function() {
    var groupLocArray = window.location.pathname.split('/');
    var groupCheck = groupLocArray[1];
    var collabCheck = groupLocArray[3];
    if ((groupCheck == 'groups') && (collabCheck == 'collaborations'))  {
        $('a.btn.add_collaboration_link').before("<a style='color:white;position: relative;left: 20px;' href='/courses/899/pages/student-collaboration-tools'><button class='Button btn btn-primary'><strong>HELP&nbsp&nbsp</strong><i style='font-size:0.75rem'> (Course Resource Page)</i></button></a>");
    }  else {
        console.log("Not in Group HomePage or Conferences Area!")
    }
});

    /*Added 9/5/2019 - Following call usually in Pagespecific.j; however, as there is no use of the file call is made below*/
    onElementRendered("#batch_check", function (element) {
        $(element).find("input").attr("disabled", true);
    })


//BEGIN GOOGLE ANALYTICS//

// Updated Sep 17, 2019
// In Google Analytics you'll need to set up custom dimensions as follows
// Custom Dimension 1 = Canvas User ID --- Scope = User
// Custom Dimension 2 = Archived --- Scope = User
// Custom Dimension 3 = Canvas User Role --- Scope = User
// Custom Dimension 4 = Canvas Course ID --- Scope = Hit
// Custom Dimension 5 = Canvas Course Name --- Scope = Hit
// Custom Dimension 6 = Canvas Sub-Account ID --- Scope = Hit
// Custom Dimension 7 = Canvas Term ID --- = Scope = Hit
// Custom Dimension 8 = Canvas Course Role --- Scope = Hit

(function (i, s, o, g, r, a, m) {
    i['GoogleAnalyticsObject'] = r;
    i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments)
    }, i[r].l = 1 * new Date();
    a = s.createElement(o),
        m = s.getElementsByTagName(o)[0];
    a.async = 1;
    a.src = g;
    m.parentNode.insertBefore(a, m)
})(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'custom_ga');

function removeStorage(key) {
    try {
        localStorage.removeItem(key);
        localStorage.removeItem(key + '_expiresIn');
    } catch (e) {
        console.log('removeStorage: Error removing key [' + key + '] from localStorage: ' + JSON.stringify(e));
        return false;
    }
    return true;
}

function getStorage(key) {
    var now = Date.now(); //epoch time, lets deal only with integer
    // set expiration for storage
    var expiresIn = localStorage.getItem(key + '_expiresIn');
    if (expiresIn === undefined || expiresIn === null) {
        expiresIn = 0;
    }

    if (expiresIn < now) { // Expired
        removeStorage(key);
        return null;
    } else {
        try {
            var value = localStorage.getItem(key);
            return value;
        } catch (e) {
            console.log('getStorage: Error reading key [' + key + '] from localStorage: ' + JSON.stringify(e));
            return null;
        }
    }
}

function setStorage(key, value, expires) {
    if (expires === undefined || expires === null) {
        expires = (24 * 60 * 60); // default: seconds for 6 hours (6*60*60)
    } else {
        expires = Math.abs(expires); //make sure it's positive
    }

    var now = Date.now(); //millisecs since epoch time, lets deal only with integer
    var schedule = now + expires * 1000;
    try {
        localStorage.setItem(key, value);
        localStorage.setItem(key + '_expiresIn', schedule);
    } catch (e) {
        console.log('setStorage: Error setting key [' + key + '] in localStorage: ' + JSON.stringify(e));
        return false;
    }
    return true;
}

async function coursesRequest(courseId) {
    // 
    let response = await fetch('/api/v1/users/self/courses?per_page=100');
    let data = await response.text();
    data = data.substr(9);
    data = JSON.parse(data)
    var stringData = JSON.stringify(data)
    setStorage('ga_enrollments', stringData, null)
    var course = parseCourses(courseId, stringData)
    return course
};

function parseCourses(courseId, courseData) {
    if (courseData != undefined) {
        let data = JSON.parse(courseData);
        //console.log(data)
        for (var i = 0; i < data.length; i++) {
            // console.log(data[i]['id'] + " " + courseId)
            if (data[i]['id'] == courseId) {
                return data[i]
            }
        }
    }
    return null
}

function gaCourseDimensions(course) {
    custom_ga('set', 'dimension4', course['id']);
    custom_ga('set', 'dimension5', course['name']);
    custom_ga('set', 'dimension6', course['account_id']);
    custom_ga('set', 'dimension7', course['enrollment_term_id']);
    custom_ga('set', 'dimension8', course['enrollments'][0]['type']);
    custom_ga('send', 'pageview');
    return
}

function googleAnalyticsCode(trackingID) {
    var userId, userRoles, attempts, courseId;
    custom_ga('create', trackingID, 'auto');
    userId = ENV["current_user_id"];
    userRoles = ENV['current_user_roles'];
    custom_ga('set', 'userId', userId);
    custom_ga('set', 'dimension1', userId);
    custom_ga('set', 'dimension3', userRoles);
    courseId = window.location.pathname.match(/\/courses\/(\d+)/);
    if (courseId) {
        courseId = courseId[1];
        attempts = 0;
        try {
            let courses = getStorage('ga_enrollments')
            if (courses != null) {
                var course = parseCourses(courseId, courses);
                if (course === null) {
                    // console.log("course_id not found in cache, retrieving...")
                    coursesRequest(courseId).then(course => {
                        if (course === null) {
                            // console.log("course data not found")
                            custom_ga('set', 'dimension4', courseId);
                            custom_ga('send', 'pageview');
                        } else {
                            gaCourseDimensions(course)
                        }
                    });
                } else {
                    // console.log("course found in cache")
                    gaCourseDimensions(course)
                }
            } else {
                // console.log("cache not found, retrieving cache data")
                coursesRequest(courseId).then(course => {
                    if (course === null) {
                        // console.log("course data not found")
                        custom_ga('set', 'dimension4', courseId);
                        custom_ga('send', 'pageview');
                    } else {
                        gaCourseDimensions(course)
                    }
                });
            }
        } catch (err) {
            attempts += 1;
            if (attempts > 5) {
                custom_ga('set', 'dimension4', courseId);
                custom_ga('send', 'pageview');
                return;
            };
        };
    } else {
        custom_ga('send', 'pageview');
    };
};

googleAnalyticsCode("UA-137495244-1") // GA Tracking Code

//END GOOGLE ANALYTICS//



